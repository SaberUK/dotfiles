#!/usr/bin/env ruby
# SaberUK's Dot Files (C) 2012-2017 Peter "SaberUK" Powell <petpow@saberuk.com>

%w(fileutils json net/http ostruct uri yaml).each do |lib|
	require lib
end

config = YAML.load_file "#{Dir.home}/.config/imgur.yml"
unless config.has_key? 'id'
	STDERR.puts 'Fatal error: configuration file is missing the client id!'
	exit 1
end

links = Array.new
uri = URI.parse 'https://api.imgur.com/3/upload'
images = Dir["#{Dir.home}/Desktop/{Screen Shot,Photo} *.{jpg,png}"]

if images.empty?
	STDERR.puts "Error: no images to upload!"
	exit 1
end

puts "Uploading #{images.count} image(s) ..."
images.each do |file|
	puts "Uploading '#{File.basename file}' ..."

	http = Net::HTTP.new uri.host, uri.port
	http.use_ssl = true

	request = Net::HTTP::Post.new uri.path
	request['Authorization'] = "Client-ID #{config['id']}"
	request.form_data = { image: File.binread(file) }

	response = http.request(request) rescue OpenStruct.new(code: 999, message: 'No Internet Connection')
	unless response.is_a? Net::HTTPSuccess
		STDERR.puts "An error occurred while uploading this image:"
		STDERR.puts "HTTP #{response.code}: #{response.message}"
		exit 1
	end

	document = JSON.parse response.body
	unless document['success']
		STDERR.puts "An error occurred while uploading this image:"
		STDERR.puts "HTTP #{document['status']}: #{document['data']['error']}"
		exit 1
	end

	links << document['data']['link']
	puts "Upload complete -- #{document['data']['link']}"

	FileUtils.move file, "#{Dir.home}/Pictures/Imgur"
end

IO.popen 'pbcopy', 'r+' do |clipboard|
	clipboard.print links.join ' '
end

message = "#{links.size} link(s) have been copied to the clipboard."
unless system 'terminal-notifier', '-title', 'Imgur upload complete!', '-message', message
	puts "#{message}\a"
end
